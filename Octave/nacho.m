pkg load symbolic %Importar symbolicformat free%-------------------------------------------------------------------------------%Funciones intermedias%-------------------------------------------------------------------------------function [r] = derivate(func, e)  f = @(x) eval(func);  syms x;  ff = f(x);  ffd = diff(ff, x);  df = function_handle(ffd);  r = df(e);endfunctionfunction [r] = derivate2(func, e)  f = @(x) eval(func);  syms x;  ff = f(x);  ffd = diff(diff(ff, x), x);  df = function_handle(ffd);  r = df(e);endfunctionfunction [r] = evaluate(f, x)  r = eval(f);endfunction  %-------------------------------------------------------------------------------% EULER%-------------------------------------------------------------------------------function [xAprox, iter] = euler(f, xo, tol, graf=1)  x = xo;  %Iteration counter  iter = 0;  try    do      %Increase the iteration counter      iter++;            fx = evaluate(f, x)      dfx = derivate(f, x);      d2fx = derivate2(f, x);       lf = (fx * d2fx) / (dfx ^ 2);            %Compute the current value of 'x'      xAprox = x - ((2 / (1 + sqrt(1 - 2 * lf))) * (fx / dfx));      x = xAprox;            tempTol = abs(eval(f));      error(iter) = {tempTol};    until (tempTol <= tol);    if(graf)      %Show 'iteration vs |f(x)|' graphic      plot(cell2mat(error));      ylabel('Errores (|f(x)|)');      xlabel('Iteraciones (k)');      title('Gráfica comparativa: Euler method');    endif  catch err    warning(err.identifier, err.message);  end_try_catchendfunction%-------------------------------------------------------------------------------% DONG%-------------------------------------------------------------------------------function [xAprox, iter] = dong(f, m, xo, tol, graf=1)  x = xo;  %Iteration counter  iter = 0;  try    do      %Increase the iteration counter      iter++;            fx = evaluate(f, x)      dfx = derivate(f, x);      y = x - fx / dfx;      dfy = derivate(f, y);            %Compute the current value of 'x'      xAprox = y - fx / ((((m / (m - 1))^(m + 1)) * dfy) + (((m - (m^2) - 1) / ((m - 1)^2)) * dfx));      x = xAprox;            tempTol = abs(eval(f));      error(iter) = {tempTol};    until (tempTol <= tol);    if(graf)      %Show 'iteration vs |f(x)|' graphic      plot(cell2mat(error));      ylabel('Errores (|f(x)|)');      xlabel('Iteraciones (k)');      title('Gráfica comparativa: Dong method');    endif  catch err    warning(err.identifier, err.message);  end_try_catchendfunction%-------------------------------------------------------------------------------% IODF%-------------------------------------------------------------------------------function [xAprox, iter] = iodf(f, xo, tol, graf=1)  x = xo;  %Iteration counter  iter = 0;  try    do      %Increase the iteration counter      iter++;            fx = evaluate(f, x);      a = x + fx;      b = x - fx;      y = x - (2 * (fx ^ 2)) / (evaluate(f, a) - evaluate(f, b));      fy = evaluate(f, y);      z = y - fy * ((y - x) / (2 * fy - fx));            %Compute the current value of 'x'      xAprox = z - f(z) * ((y - x) / (2 * fy - fx));      x = xAprox;            tempTol = abs(eval(f));      error(iter) = {tempTol};    until (tempTol <= tol);    if(graf)      %Show 'iteration vs |f(x)|' graphic      plot(cell2mat(error));      ylabel('Errores (|f(x)|)');      xlabel('Iteraciones (k)');      title('Gráfica comparativa: IODF method');    endif  catch err    warning(err.identifier, err.message);  end_try_catchendfunction#[x_aprox, iter] = euler('(x^2) - exp(x) - 3*x + 2', 0.7, 0.0001, 0)#[x_aprox, iter] = dong('(exp((x^2) + (7*x) - 30) - 1)^6', 6, 3.1, 0.0001, 0)#[x_aprox, iter] = iodf('(x - 1)**3 - 1', 1.5, 0.0001, 0)